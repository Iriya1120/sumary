<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    <script>
        function TreeNode(val, left, right) {
            this.val = (val===undefined ? 0 : val)
            this.left = (left===undefined ? null : left)
            this.right = (right===undefined ? null : right)
        }

        let root = new TreeNode(5);
        let root1 = new TreeNode(4);
        let root2 = new TreeNode(8);
        let root3 = new TreeNode(11);
        let root4 = new TreeNode(13);
        let root5 = new TreeNode(4);
        let root6 = new TreeNode(7);
        let root7 = new TreeNode(2);
        let root8 = new TreeNode(1);
        root.left = root1;
        root.right = root2;
        root1.left = root3;
        root2.left = root4;
        root2.right = root5;
        root3.left = root6;
        root3.right = root7;
        root5.right = root8;


        // 递归遍历
        // function suffOrder(root) {
        //     let res = [];
        //     if(!root) return res;

        //     const order = (node) => {
        //         if(node.left) order(node.left);
        //         if(node.right) order(node.right);
        //         res.push(node.val);
        //     }

        //     order(root)
        //     return res;
        // }


        // 迭代遍历
        // function suffOrder(root) {
        //     let res = [];
        //     if(!root) return res;
        //     let stack = [];
        //     let temp = root;
        //     while(temp){
        //         stack.push(temp)
        //         temp = temp.left
        //     }

        //     let prev = null;
        //     while(stack.length != 0){
        //         let top = stack[stack.length - 1]
        //         if(top.right === null || (top.right && prev == top.right)){
        //             prev = stack.pop();
        //             res.push(prev.val)
        //         }else {
        //             temp = top.right;
        //             while(temp){
        //                 stack.push(temp)
        //                 temp = temp.left
        //             }
        //         }
        //     }

        //     return res
        // }

        console.log(suffOrder(root));   // [7, 2, 11, 4, 13, 1, 4, 8, 5]
    </script>
</body>
</html>