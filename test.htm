<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style>
        /* .ball {
            width: 50px;
            height: 50px;
            background-color: red;
            position: absolute;
            animation: move 5s infinite;
        }

        @keyframes move {
            0% {
                top: 0;
            }

            100% {
                top: 200px;
            }
        } */
    </style>
</head>
<body>
    <script>
        // var longestPalindrome = function(s) {
        //     let len = s.length
        //     if(len < 2) return s
            
        //     let begin = 0;
        //     let maxLen = 1;
            

        //     const getMaxLen = (left, right) => {
        //         while(left >= 0 && right < len){
        //             if(s[left] === s[right]){
        //                 left --
        //                 right ++
        //             }else {
        //                 break
        //             }
        //         }
        //         return right - left - 1
        //     }

        //     for(let i = 0; i < len - 1; i++){
        //         let oddLen = getMaxLen(i, i)
        //         let evenLen = getMaxLen(i, i + 1)
        //         let curMaxLen = Math.max(oddLen, evenLen)
        //         if(curMaxLen > maxLen){
        //             maxLen = curMaxLen
        //             begin = i - Math.floor((maxLen - 1) / 2)
        //         }
        //     }

        //     return s.substring(begin, begin + maxLen)
        // };

        // console.log(longestPalindrome("cbbd"));

        // function ListNode(val) {
        //     this.val = val;
        //     this.next = null;
        // }

        // let l1 = new ListNode(2)
        // let l2 = new ListNode(6)
        // let l3 = new ListNode(4)
        // let l4 = new ListNode(1)
        // let l5 = new ListNode(5)
        // l1.next = l2
        // l2.next = l3
        // l4.next = l5
        // var getIntersectionNode = function(headA, headB) {
        //     let pA = headA, pB = headB
        //     while(pA != pB){
        //         pA = pA == null ? headB : pA.next
        //         pB = pB == null ? headA : pB.next
        //     }
        //     return pA
        // };

        // console.log(getIntersectionNode(l1,l4));

        // console.log('1,3,4,6,9'.split(','));


        // let arr = '[1,3,4,6,9]'.substring(1, arr.length - 1)
        // let target = 10
        // arr = arr.split(/,/).map((item) => parseInt(item))
        // let map = []
        // let f = false
        // for(let i = 0; i < arr.length; i++){
        //     let temp = target - arr[i]
        //     if(map.indexOf(temp) > -1){
        //         console.log(true);
        //         f = true
        //         break
        //     }else{
        //         map.push(arr[i])
        //     }
        // }

        // if(!f) console.log(false);

        // let arr = [1,3,2,3,2,2,1,2]
        // let target = 2
        // let map = new Map()
        // for(let i = 0; i < arr.length; i++){
        //     if(map.has(arr[i])){
        //         map.set(arr[i], map.get(arr[i]) + 1)
        //     }else {
        //         map.set(arr[i], 1)
        //     }
        // }
        // console.log(map);
        // let arrs = Array.from(map)
        // arrs.sort((o1,o2) => {
        //     if(o1[1] === o2[1]){
        //         return o1[0] - o2[0]
        //     }else {
        //         return o2[1] - o1[1]
        //     }
        // })
        // console.log(arrs[target - 1][0] + ' ' + arrs[target - 1][1]);


        // let arr = ["bilibili.com", "master@bilibili.com", "test.bilibili@bilibili.com", "test@bilibili.biliil.com", "test.bilibili.com", "test.bili@bili.com"]

        // let a = []
        // for(let i = 0;i < arr.length; i++){
        //     if(!arr[i].endsWith('.com') || !(arr[i].indexOf('@') > -1)){
        //         a.push(arr[i])
        //     }
        // }

        // console.log(a);

        // const { count } = require('console'); 
        // var fs = require('fs'); 
        // var buf = ''; 
        
        // process.stdin.on('readable', function () { 
        //     var chunk = process.stdin.read(); 
        
        //     if (chunk) {
        //         buf += chunk.toString(); 
        //     }
        // }); 
        
        // process.stdin.on('end', function () { 
        //     console.log(buf)
        // });

        // function Person(){
        //     this.name = 'hahhah'
        // }

        // let p1 = new Person()
        // let p2 = Object.create(p1)

        // console.log(p1,p2);
        // console.log('1234565');

        
        // class A {
        //     static c (){
        //         console.log(this.name);
        //     }

        //     constructor({color='yellow'} = {color: 'green'}){
        //         console.log(color);
        //         this.name = 'liyan'
        //         this.x = A.c
        //     }

            
        // }

        // let a = new A({color: 'purple'})
        // a.x()

        // console.log();

        // function perfect(num) {
        //     let arr = num.split('').map(item => parseInt(item))
        //     let isP = isPerfect(arr)
        //     if(isP) return arr.join('')

        //     for(let i = arr.length - 1; i >= 0; i--){
        //         for(let j = 3; j >= 1; j--){
        //             arr[i] = j
        //             if(isPerfect(arr) && parseInt(arr.join('')) <= num){
        //                 return parseInt(arr.join(''))
        //             }
        //             if(j == 1) {
        //                 arr[i] = 3
        //             }
        //         }           
        //     }
        //     arr.shift()
        //     return parseInt(arr.join(''))
        // }

        // function isPerfect(arr){
        //     return arr.every(item => item == 1 || item == 2 || item == 3)
        // }

        // console.log(perfect('1999999999999999999999'));

        // var arr=[];
        // for(var i=0;i<100;i++){
        //         arr[i]=i;
        //     }
        // arr.sort(function(){ return 0.5 - Math.random() })
        // console.log(arr);
        // let a = arr.splice(0, 13)
        // console.log(a);
        // console.log(arr);

        // function sum(num1, num2, num3) {
        //     return num1 + num2 + num3;
        // }

        // function curry(func) {
        //     /* Write Code Here */
        //     let args = Array.prototype.slice.call(arguments, 1)
        //     return function(){
        //         let innerArgs = Array.prototype.slice.call(arguments)
        //         let finnalArgs = [...args, ...innerArgs]
        //         return func.apply(null, finnalArgs)
        //     }
        // }

        // let curriedSum = curry(sum);
        // let res;

        // res = curriedSum(1,2,3)

        // console.log(res);

        // function dataProxy(data, path = []) {
        // /* Write Code Here */
        //     let flag = false
        //     let handler = {
        //         get: function(target, property, receiver){
        //             if(target[property] == undefined){
        //                 path.push(target[property])
        //                 target[property] = {}
        //                 flag = true
        //             }

        //             return new Proxy(target[property], handler)
        //         }
        //     }
        //     return new Proxy(data, handler)

            
        // }

        // let res = dataProxy({ret: true, data:{count:1}}).a.b.c.e

        // console.log(res);

        // function curry(func){
        //     return function curried(...args){
        //         if(args.length >= func.length){
        //             return func.apply(this, args);
        //         }else{
        //             return function(...args2){
        //                 return curried.apply(this, args.concat(args2))
        //             }
        //         }
        //     }
        // }

        // let curriedSum = curry(sum)

        // console.log(curriedSum(1,2,3));
        // console.log(curriedSum(1)(2)(3));

        // function getPersonInfo (one, two, three) {
        // console.log(one)
        // console.log(two)
        // console.log(three)
        // }
        // const person = 'Lydia'
        // const age = 21
        // getPersonInfo `${person} is ${age} years old`

        // let p1 = new Promise((resolve, reject) => {
        //     setTimeout(() => {
        //         resolve('success')
        //     },1000)
        // })

        // let p2 = new Promise((resolve, reject) => {
        //     setTimeout(() => {
        //         resolve('success2')
        //     }, 500)
        // })

        // Promise.all([p1, p2]).then((result) => {
        //     console.log(result)
        // }).catch((error) => {
        //     console.log(error)  // 打开的是 'failed'
        // })

        // 2 6 5 4
// 1 5 7 6
// 9 8 8 7
// 1 4 7 8
        // let row = 4
        // let arr = new Array(4)
        // arr[0] = '2 6 5 4'.split(' ').map(item => parseInt(item))
        // arr[1] = '1 5 7 6'.split(' ').map(item => parseInt(item))
        // arr[2] = '9 8 8 7'.split(' ').map(item => parseInt(item))
        // arr[3] = '1 4 7 8'.split(' ').map(item => parseInt(item))
        // let count = 0
        // let tempRow = row
        // while(arr.length != 1){
        //     let restRow = arr.pop()
        //     for(let i = 0;i < row; i++){
        //         arr[count][i] += restRow[i]
        //     }
        //     count++
        //     if(count == tempRow / 2){
        //         count = 0
        //         tempRow /= 2
        //     }
        // }
        // let res = arr[0].reduce((t, c) => {
        //     return t + c
        // })

        // console.log(res)

        // let arr2 = [1,2,3,4,5]
        // let missionCount = 5
        // let timeApply = 4
        // let timeApplyArr = [1,2,3,4]
        // let count = 0
        // let s = 0
        // let flag = false
        // let map = []

        // let temp = 0
        // for(let i = 0; i < arr2.length; i++){
        //     for(let j = 0; j < i+1; j++){
        //         temp += arr2[j]
        //     }
        //     map.push(temp)
        //     temp = 0
        // }
        // for(let i = 0; i < timeApply; i++){
        //     flag = false
        //     for(let j = 0; j < missionCount; j++){
        //         if(timeApplyArr[i] >= map[j]){
        //             count = j + 1
        //             console.log(count)
        //             count = 0
        //             flag = true
        //             break
        //         }
        //     }
        //     if(!flag){
        //         console.log(count)
        //     }
        // }

        // let point = 4
        // let startPoint = 1
        // let iconCounts = [3,2,2,1]
        // let total = 0
        // if(iconCounts[startPoint - 1] == 0){
        //     console.log(0)
        // }else if(iconCounts[startPoint - 1] < 2 && iconCounts[startPoint - 2] < 2 && iconCounts[startPoint] < 2){
        //     console.log(0)
        // }else {
        //     let leftPath = 0
        //     let rightPath = 0
        //     for(let i = startPoint - 2; i >= 0; i--){
        //         if(iconCounts[i] - 1 > 0){
        //             total += (iconCounts[i] - 1)
        //             leftPath += 1
        //         }else {
        //             total += iconCounts[i]
        //             total += leftPath
        //             break
        //         }
        //     }
        //     for(let j = startPoint; j < point; j++){
        //         if(iconCounts[j] - 1 > 0){
        //             total += (iconCounts[j] - 1)
        //             rightPath += 1
        //         }else {
        //             total += iconCounts[j]
        //             total += rightPath
        //             break
        //         }
        //     }
        //     total += iconCounts[startPoint - 1]
        //     console.log(total)
        // }


        // let t = 1
        // let tArr = []
        // for(let i = 0; i < t; i++){
        //     tArr[i] = {}
        //     let arrs = [4,3,3]
        //     tArr[i].cities = arrs[0]	// 城市数量
        //     tArr[i].roads = arrs[1]	// 道路数量
        //     tArr[i].recordLen = arrs[2]	// 小团旅行记录的长度
        //     tArr[i].validRecord = []	// 有道路连接的路
        //     // for(let j = 0; j < tArr[i].roads; j++){	// 初始化有道路连接的路
        //     tArr[i].validRecord[0] = [1,2]
        //     tArr[i].validRecord[1] = [2,3]
        //     tArr[i].validRecord[2] = [3,4]
        //     // }
        //     // 小团猜测的旅行记录
        //     tArr[i].guessRecord = [1,2,3,4]
        //     tArr[i].flag = new Array(tArr[i].guessRecord.length - 1).fill(false)
        //     let o = 0
        //     for(let l = 0, m = l + 1; m < tArr[i].guessRecord.length; l++, m++){
        //         // 判断是否有道路
        //         for(let n = 0; n < tArr[i].roads; n++){
        //             if(tArr[i].validRecord[n][0] == tArr[i].guessRecord[l] &&
        //             tArr[i].validRecord[n][1] == tArr[i].guessRecord[m]){
        //                 tArr[i].flag[o++] = true
        //                 break
        //             }
        //         }
        //     }
        //     let f = tArr[i].flag.every(item => item)
        //     if(f) console.log('YES')
        //     else console.log('NO')
        // }
        // new Promise((res, rej) => {
        //     res(1)
        // }).then(res => {
        //     throw Error('111')
        // }).catch((e) => {
        //     // console.log(e);
        //     console.log(111);
        // })
        // let bei = [0, 1, 1]
        // function fib(n){
        //     if(bei[n] != undefined) return bei[n]
        //     bei[n] = fib(n - 1) + fib(n - 2)
        //     return bei[n]
        // }
        // console.log(fib(1025) % 5);
        // let obj = {
        //     a: obj,
        //     b: c,
        //     c: b
        // }
        // let w = new WeakMap()

        // console.log(obj);

        // function t(s1,s2){
        //     let s3 = s2.split('')
        //     s3.reverse()
        //     s3 = s3.join('')
        //     let j = 0, k = 0
        //     for(let i = 0; i < s1.length; i++){
        //         if(s1[i] == s2[j]){
        //             j++
        //         }
        //         if(s1[i] == s3[k]){
        //             k++
        //         }
        //     }
        //     if(j == s2.length || k == s3.length){
        //         return true
        //     }else {
        //         return false
        //     }
        // }

        // console.log(t('abaesth', 'ash'));

        // function t(arr, k){
        //     let map = new Map()
        //     for(let i = 0; i < arr.length; i++){
        //         if(map.has(arr[i])){
        //             map.set(arr[i], map.get(arr[i]) + 1)
        //         }else {
        //             map.set(arr[i], 1)
        //         }
        //     }
        //     let mapArr = Array.from(map)
        //     mapArr.sort((o1,o2) => o2[0] - o1[0])
        //     return mapArr[k - 1][1]
        // }
        // console.log(t([1,2,3,4,4,4], 1));


        // let a = 6, b = 9, f = 2, k = 4
        // let count = 0
        // let dir = 'toRight'	// 从0到a
        // let restE = b
        // let chargeCount = 0	// 充能次数
        // while(count < k){
        //     if(dir == 'toRight'){
        //         restE = restE - f
        //         if(restE < (a - f) * 2){	// 不能支持一个来回,需要进行充能
        //             if(restE >= a - f && count == k - 1){
        //                 count++
        //                 break
        //             }else if(b < 2*(a-f) && count < k - 1){
        //                 console.log(-1)
        //                 break
        //             }
        //             chargeCount++
        //             restE = b
        //         }
        //         // 继续向右走
        //         restE = restE - (a - f)	// 成功从0到a
        //         count++
        //     }else if(dir == 'toLeft'){
        //         restE = restE - (a - f) // 从a到f点进行判断是否需要充能
        //         if(restE < 2 * f){
        //             if(restE >= f && count == k - 1){
        //                 count++
        //                 break
        //             }else if(b < 2 * f && count < k - 1){	// 充完能也不支持一个来回，就直接判断不可以
        //                 console.log(-1)
        //                 break
        //             }
        //             chargeCount++
        //             restE = b
        //         }
        //         // 继续向左走
        //         restE = restE - f
        //         count++
        //     }
        //     dir = dir == 'toLeft' ? 'toRight' : 'toLeft'
        // }
        // if(count == k){
        //     console.log(chargeCount)
        // }


        // let inp1 = read_line().split(' ').map(item => parseInt(item))
        // let n = inp1[0]	// 狗狗数量
        // let k = inp1[1]	// 预算
        // let d = inp1[2]	// 预算系数
        // let likeArr = read_line().split(' ').map(item => parseInt(item))	// 小A对狗狗的喜爱值
        // let costArr = read_line().split(' ').map(item => parseInt(item))	// 每只狗狗的成本
        // let monthCostArr = read_line().split(' ').map(item => parseInt(item))	// 每只狗狗每个月的成本
        // let ys = []
        // for(let i = 0; i < n; i++){
        //     ys[i] = d / n * likeArr[i]
        // }
        // for(let i = 0; i < n; i++){
        //     if(ys[i] - monthCostArr[i] < 0){
        //         console.log(likeArr[i - 1] || -1)
        //         break
        //     }
        // }


        // let n = 5	// 狗狗数量
        // let k = 100	// 预算
        // let d = 100	// 预算系数
        // let likeArr = [1,2,3,4,5]	// 小A对狗狗的喜爱值
        // let costArr = [100,110,110,120,150]	// 每只狗狗的成本
        // let monthCostArr = [11,22,44,88,176]	// 每只狗狗每个月的成本
        // let ys = []
        // let bestDog = -1
        // for(let i = 0; i < n; i++){
        //     ys[i] = d / n * likeArr[i]
        // }
        // for(let i = 0; i < n; i++){
        //     if(ys[i] - monthCostArr[i] > 0 && k >= costArr[i]){
        //         bestDog = likeArr[i]
        //     }
        // }
        // console.log(bestDog)


        // let date = new Date('2021-09-13 00:00:00')
        // let operates = ['+5d']
        // for(let i = 0; i < operates.length; i++){
        //     let alpha = operates[i].match(/[a-zA-Z]/)[0]	// 最后的字母
        //     let addOrSub = operates[i][0]
        //     let mount = parseInt(operates[i].match(/[0-9]+/)[0])
        //     if(alpha == 'W'){
        //         date.setDate(addOrSub == '+' ? date.getDate() + mount * 7 : date.getDate() - mount * 7)
        //     }else if(alpha == 'd'){
        //         let day = date.getDate()
        //         date.setDate(addOrSub == '+' ? date.getDate() + mount : date.getDate() - mount)
        //     }else if(alpha == 'h'){
        //         date.setHours(addOrSub == '+' ? date.getHours() + mount : date.getHours() - mount)
        //     }else if(alpha == 'm'){
        //         date.setMinutes(addOrSub == '+' ? date.getMinutes() + mount : date.getMinutes() - mount)
        //     }else if(alpha == 's'){
        //         date.setSeconds(addOrSub == '+' ? date.getSeconds() + mount : date.getSeconds() - mount)
        //     }
        // }

        // let dateObj = {}
        // dateObj.year = date.getFullYear()
        // dateObj.month = (date.getMonth() + 1).toString().length == 1 ? '0' + (date.getMonth() + 1) : date.getMonth() + 1
        // dateObj.day = date.getDate().toString().length == 1 ? '0' + date.getDate() : date.getDate()
        // dateObj.hour = date.getHours().toString().length == 1 ? '0' + date.getHours() : date.getHours()
        // dateObj.minute = date.getMinutes().toString().length == 1 ? '0' + date.getMinutes() : date.getMinutes()
        // dateObj.second = date.getSeconds().toString().length == 1 ? '0' + date.getSeconds() : date.getSeconds()
        // console.log(dateObj.year + '-' + dateObj.month + '-' + dateObj.day + ' '+ 
        //             dateObj.hour + ':' + dateObj.minute + ':' + dateObj.second)

        // let res = {}
        // let obj1 = {a: [1]}
        // let obj2 = {a: [2]}
        // for(let key of Object.keys(obj1)){
        //     if(res[key] == undefined){
        //         res[key] = obj1[key]
        //     }else {
        //         if(typeof res[key] != typeof obj2[key]){
        //             throw Error()
        //         }
        //         if(Array.isArray(res[key])){
        //             res[key] = res[key].concat(obj1[key])
        //         }else {
        //             res[key] = [res[key]].concat(obj1[key])
        //         }
        //     }
        // }

        // for(let key of Object.keys(obj2)){
        //     if(res[key] == undefined){
        //         res[key] = obj2[key]
        //     }else {
        //         if(typeof res[key] != typeof obj2[key]){
        //             throw Error()
        //         }
        //         if(Array.isArray(res[key])){
        //             res[key] = res[key].concat(obj2[key])
        //         }else {
        //             res[key] = [res[key]].concat(obj2[key])
        //         }
        //     }
        // }
        // res = Object.assign(obj1, obj2)

        // console.log(res);

        console.log(1237823618.132231123.toLocaleString());
        
    </script>
    <!-- <div style="height: 1000px;min-height: 500px;max-height: 300px;">112</div>
     -->
     <div class="ball"></div>
</body>
</html>