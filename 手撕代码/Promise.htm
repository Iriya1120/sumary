<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    <script>
        class MyPromise {
            constructor(executor) {
                if (typeof executor !== 'function'){
                    throw new TypeError('TypeError')
                }

                this.value = null
                this.reason = null
                this.state = 'pending'
                this.fulfilledCallbacks = []
                this.rejectedCallbacks = []
                this.bindThis()
                try {
                    executor(this.resolve, this.reject)
                } catch (e) {
                    this.reject(e)
                }
                
            }

            resolve(value){
                if(this.state === 'pending'){
                    this.state = 'fulfilled'
                    this.value = value
                    this.fulfilledCallbacks.forEach(fn => fn(this.value))
                }
            }

            reject(reason) {
                if(this.state === 'pending'){
                    this.state = 'rejected'
                    this.reason = reason
                    this.rejectedCallbacks.forEach(fn => fn(this.reason))
                }
            }

            bindThis(){
                this.resolve = this.resolve.bind(this)
                this.reject = this.reject.bind(this)
            }

            then(fulfilled, rejected){
                if(typeof fulfilled != 'function'){
                    fulfilled = function(value){
                        return value
                    }
                }
                if(typeof rejected != 'function'){
                    rejected = function(reason){
                        throw reason
                    }
                }

                return new MyPromise((res, rej) => {
                    if(this.state == 'fulfilled'){
                        setTimeout(() => {
                            const x = fulfilled(this.value)
                            res(x)
                        })
                    }

                    if(this.state == 'rejected'){
                        setTimeout(() => {
                            const x = rejected(this.value)
                            res(x)
                        })
                    }

                    if(this.state == 'pending'){
                        this.fulfilledCallbacks.push((value) => {
                            setTimeout(() => {
                                const x = fulfilled(value)
                                res(x)
                            })
                        })

                        this.rejectedCallbacks.push((reason) => {
                            setTimeout(() => {
                                const x = rejected(reason)
                                res(x)
                            })
                        })
                    }
                })
            }
        }

        let p = new MyPromise((res, rej) => {
            console.log(1);
            res()
        }).then(res => {
            console.log(2);
        }).then(res => {
            console.log(3);
        })
        console.log(4);

        // let p2 = new Promise((res, rej) => {
        //     console.log(1);
        //     res()
        // }).then(res => {
        //     console.log(2);
        // }).then(res => {
        //     console.log(3);
        // })
        // console.log(4);
    </script>
</body>
</html>